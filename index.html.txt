<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –û—Ç–∫—Ä—ã—Ç–æ–∫</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Playfair Display', sans-serif;
            background: url('new-year-bg.jpg') fixed;
            background-size: cover;
            min-height: 100vh;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            max-width: 1200px;
            width: 100%;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        h1 {
            text-align: center;
            color: #d40000;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .creator-section {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .controls {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            border: 2px solid #e9ecef;
        }

        .control-group {
            margin-bottom: 25px;
        }

        .control-group h3 {
            color: #d40000;
            margin-bottom: 15px;
            font-size: 1.2em;
        }

        .orientation-buttons {
            display: flex;
            gap: 10px;
        }

        .orientation-btn {
            flex: 1;
            padding: 12px;
            border: 2px solid #dee2e6;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s;
        }

        .orientation-btn.active {
            border-color: #d40000;
            background: #fff5f5;
            color: #d40000;
        }

        .backgrounds-grid, .stickers-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            max-height: 200px;
            overflow-y: auto;
        }

        .background-item, .sticker-item {
            aspect-ratio: 1;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            cursor: pointer;
            background-size: cover;
            background-position: center;
            transition: all 0.3s;
        }

        .background-item.active, .sticker-item.active {
            border-color: #d40000;
            transform: scale(0.95);
        }

        .text-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
            resize: vertical;
            min-height: 80px;
        }

        .preview-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #e9ecef;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #cardCanvas {
            max-width: 100%;
            max-height: 500px;
            border: 2px dashed #dee2e6;
            border-radius: 10px;
            background: white;
        }

        .actions {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-download {
            background: #d40000;
            color: white;
        }

        .btn-download:hover {
            background: #b30000;
            transform: translateY(-2px);
        }

        .btn-clear {
            background: #6c757d;
            color: white;
        }

        .btn-clear:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .logo {
            position: absolute;
            top: 15px;
            right: 15px;
            max-width: 80px;
            height: auto;
            z-index: 10;
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {
            .creator-section {
                grid-template-columns: 1fr;
            }
            
            .controls {
                order: 2;
            }
            
            .preview-section {
                order: 1;
            }
            
            h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –û—Ç–∫—Ä—ã—Ç–æ–∫ üéÖ</h1>
        
        <div class="creator-section">
            <div class="controls">
                <!-- –í—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ -->
                <div class="control-group">
                    <h3>–§–æ—Ä–º–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏</h3>
                    <div class="orientation-buttons">
                        <div class="orientation-btn active" data-orientation="vertical">üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è</div>
                        <div class="orientation-btn" data-orientation="horizontal">üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è</div>
                    </div>
                </div>

                <!-- –í—ã–±–æ—Ä —Ñ–æ–Ω–∞ -->
                <div class="control-group">
                    <h3>–§–æ–Ω –æ—Ç–∫—Ä—ã—Ç–∫–∏</h3>
                    <div class="backgrounds-grid" id="backgroundsGrid">
                        <!-- –§–æ–Ω—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ JS -->
                    </div>
                </div>

                <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ -->
                <div class="control-group">
                    <h3>–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—ã</h3>
                    <div class="stickers-grid" id="stickersGrid">
                        <!-- –°—Ç–∏–∫–µ—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ JS -->
                    </div>
                </div>

                <!-- –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è -->
                <div class="control-group">
                    <h3>–¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è</h3>
                    <textarea class="text-input" id="greetingText" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ..."></textarea>
                </div>
            </div>

            <div class="preview-section">
                <canvas id="cardCanvas"></canvas>
                <img src="logo.png" alt="–õ–æ–≥–æ—Ç–∏–ø" class="logo" id="cardLogo">
            </div>
        </div>

        <div class="actions">
            <button class="btn btn-download" onclick="downloadCard()">
                üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É
            </button>
            <button class="btn btn-clear" onclick="clearCard()">
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
            </button>
        </div>
    </div>

    <script>
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const config = {
            orientations: {
                vertical: { width: 400, height: 600 },
                horizontal: { width: 600, height: 400 }
            },
            backgrounds: [
                'bg1.jpg', 'bg2.jpg', 'bg3.jpg', 'bg4.jpg',
                'bg5.jpg', 'bg6.jpg', 'bg7.jpg', 'bg8.jpg'
            ],
            stickers: [
                'sticker1.png', 'sticker2.png', 'sticker3.png', 'sticker4.png',
                'sticker5.png', 'sticker6.png', 'sticker7.png', 'sticker8.png'
            ]
        };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let state = {
            orientation: 'vertical',
            selectedBackground: null,
            selectedStickers: [],
            greetingText: ''
        };

        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        const canvas = document.getElementById('cardCanvas');
        const ctx = canvas.getContext('2d');
        const backgroundsGrid = document.getElementById('backgroundsGrid');
        const stickersGrid = document.getElementById('stickersGrid');
        const greetingTextInput = document.getElementById('greetingText');
        const logo = document.getElementById('cardLogo');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        function init() {
            setupCanvas();
            loadBackgrounds();
            loadStickers();
            setupEventListeners();
            renderCard();
        }

        function setupCanvas() {
            const { width, height } = config.orientations[state.orientation];
            canvas.width = width;
            canvas.height = height;
            canvas.style.width = `${width}px`;
            canvas.style.height = `${height}px`;
        }

        function loadBackgrounds() {
            backgroundsGrid.innerHTML = '';
            config.backgrounds.forEach((bg, index) => {
                const bgItem = document.createElement('div');
                bgItem.className = 'background-item';
                bgItem.style.backgroundImage = `url(${bg})`;
                bgItem.dataset.background = bg;
                bgItem.addEventListener('click', () => selectBackground(bg));
                backgroundsGrid.appendChild(bgItem);
            });
        }

        function loadStickers() {
            stickersGrid.innerHTML = '';
            config.stickers.forEach((sticker, index) => {
                const stickerItem = document.createElement('div');
                stickerItem.className = 'sticker-item';
                stickerItem.style.backgroundImage = `url(${sticker})`;
                stickerItem.dataset.sticker = sticker;
                stickerItem.addEventListener('click', () => toggleSticker(sticker));
                stickersGrid.appendChild(stickerItem);
            });
        }

        function setupEventListeners() {
            // –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
            document.querySelectorAll('.orientation-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    document.querySelectorAll('.orientation-btn').forEach(b => b.classList.remove('active'));
                    e.target.classList.add('active');
                    state.orientation = e.target.dataset.orientation;
                    setupCanvas();
                    renderCard();
                });
            });

            // –¢–µ–∫—Å—Ç
            greetingTextInput.addEventListener('input', (e) => {
                state.greetingText = e.target.value;
                renderCard();
            });

            // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
            canvas.addEventListener('click', (e) => {
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
                console.log('Click at:', x, y);
            });
        }

        function selectBackground(background) {
            document.querySelectorAll('.background-item').forEach(item => {
                item.classList.remove('active');
                if (item.dataset.background === background) {
                    item.classList.add('active');
                }
            });
            state.selectedBackground = background;
            renderCard();
        }

        function toggleSticker(sticker) {
            const index = state.selectedStickers.indexOf(sticker);
            if (index > -1) {
                state.selectedStickers.splice(index, 1);
                document.querySelector(`.sticker-item[data-sticker="${sticker}"]`).classList.remove('active');
            } else {
                state.selectedStickers.push(sticker);
                document.querySelector(`.sticker-item[data-sticker="${sticker}"]`).classList.add('active');
            }
            renderCard();
        }

        function renderCard() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // –§–æ–Ω
            if (state.selectedBackground) {
                const bgImg = new Image();
                bgImg.onload = () => {
                    ctx.drawImage(bgImg, 0, 0, canvas.width, canvas.height);
                    renderContent();
                };
                bgImg.src = state.selectedBackground;
            } else {
                ctx.fillStyle = '#ffffff';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                renderContent();
            }
        }

        function renderContent() {
            // –°—Ç–∏–∫–µ—Ä—ã
            state.selectedStickers.forEach(sticker => {
                const img = new Image();
                img.onload = () => {
                    const size = Math.min(canvas.width, canvas.height) * 0.2;
                    const x = Math.random() * (canvas.width - size);
                    const y = Math.random() * (canvas.height - size);
                    ctx.drawImage(img, x, y, size, size);
                };
                img.src = sticker;
            });

            // –¢–µ–∫—Å—Ç
            if (state.greetingText) {
                ctx.fillStyle = '#d40000';
                ctx.font = 'bold 24px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                
                const lines = wrapText(ctx, state.greetingText, canvas.width * 0.8);
                const lineHeight = 30;
                const startY = canvas.height / 2 - (lines.length * lineHeight) / 2;
                
                lines.forEach((line, index) => {
                    ctx.fillText(line, canvas.width / 2, startY + index * lineHeight);
                });
            }

            // –õ–æ–≥–æ—Ç–∏–ø
            if (logo.complete && logo.naturalHeight !== 0) {
                const logoSize = Math.min(canvas.width, canvas.height) * 0.1;
                ctx.drawImage(logo, canvas.width - logoSize - 10, 10, logoSize, logoSize);
            }
        }

        function wrapText(context, text, maxWidth) {
            const words = text.split(' ');
            const lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                const word = words[i];
                const width = context.measureText(currentLine + ' ' + word).width;
                if (width < maxWidth) {
                    currentLine += ' ' + word;
                } else {
                    lines.push(currentLine);
                    currentLine = word;
                }
            }
            lines.push(currentLine);
            return lines;
        }

        function downloadCard() {
            const link = document.createElement('a');
            link.download = '–Ω–æ–≤–æ–≥–æ–¥–Ω—è—è-–æ—Ç–∫—Ä—ã—Ç–∫–∞.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
        }

        function clearCard() {
            state.selectedBackground = null;
            state.selectedStickers = [];
            state.greetingText = '';
            greetingTextInput.value = '';
            
            document.querySelectorAll('.background-item, .sticker-item').forEach(item => {
                item.classList.remove('active');
            });
            
            renderCard();
        }

        // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        window.addEventListener('load', init);
    </script>
</body>
</html>